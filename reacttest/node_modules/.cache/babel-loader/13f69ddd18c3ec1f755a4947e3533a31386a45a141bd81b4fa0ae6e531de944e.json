{"ast":null,"code":"var _jsxFileName = \"/Users/ts/Desktop/reactDemo/reacttest/src/components/memo/MemoCreate.tsx\",\n  _s = $RefreshSig$();\n// 登録処理に必要なものは以下の2つ\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n// Memoモデルの定義を示す\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoCreate = () => {\n  _s();\n  const [content, setContent] = useState('');\n  const [createdAt, setCreatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [updatedAt, setUpdatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [successMessage, setSuccessMessage] = useState(''); // 成功メッセージ用のステートを追加\n  const [errorMessage, setErrorMessage] = useState(''); // エラーメッセージ用のステートを追加\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSuccessMessage(''); // 成功メッセージをクリア\n    setErrorMessage(''); // エラーメッセージをクリア\n\n    try {\n      const newMemo = {\n        //id: null, // バックエンドで自動生成されることが多い\n        content: content,\n        createdAt: '',\n        // バックエンドに合わせてフォーマットする必要がある\n        updatedAt: '' // バックエンドに合わせてフォーマットする必要がある\n      };\n      const response = await axios.post('http://localhost:8080/api/memo/create', newMemo); // 必要に応じてURLを調整\n      console.log('メモが作成されました:', response.data);\n      setSuccessMessage('メモの作成に成功しました！');\n\n      // フォーム内容をリセットしてcreate画面を再度表示する\n      setContent('');\n    } catch (error) {\n      console.error('メモ作成エラー:', error);\n      setErrorMessage('メモの作成に失敗しました。'); // エラーメッセージを設定\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 26\n    }, this), \" \", errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u5185\\u5BB9:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"content\",\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u30E1\\u30E2\\u3092\\u4F5C\\u6210\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoCreate, \"wAfHRnbaUSm33zm+MnP7ojc5JPY=\");\n_c = MemoCreate;\nexport default MemoCreate;\nvar _c;\n$RefreshReg$(_c, \"MemoCreate\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","MemoCreate","_s","content","setContent","createdAt","setCreatedAt","updatedAt","setUpdatedAt","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","newMemo","response","post","console","log","data","error","onSubmit","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","name","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/ts/Desktop/reactDemo/reacttest/src/components/memo/MemoCreate.tsx"],"sourcesContent":["// 登録処理に必要なものは以下の2つ\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Memoモデルの定義を示す\ninterface Memo {\n  //id: string | null;\n  content: string;\n  createdAt: string; // 必要に応じてDateオブジェクトに変更\n  updatedAt: string; // 必要に応じてDateオブジェクトに変更\n}\n\nconst MemoCreate: React.FC = () => {\n  const [content, setContent] = useState('');\n  const [createdAt, setCreatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [updatedAt, setUpdatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [successMessage, setSuccessMessage] = useState(''); // 成功メッセージ用のステートを追加\n  const [errorMessage, setErrorMessage] = useState(''); // エラーメッセージ用のステートを追加\n\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSuccessMessage(''); // 成功メッセージをクリア\n    setErrorMessage(''); // エラーメッセージをクリア\n\n    try {\n      const newMemo: Memo = {\n        //id: null, // バックエンドで自動生成されることが多い\n        content: content,\n        createdAt: '', // バックエンドに合わせてフォーマットする必要がある\n        updatedAt: '', // バックエンドに合わせてフォーマットする必要がある\n      };\n\n      const response = await axios.post('http://localhost:8080/api/memo/create', newMemo); // 必要に応じてURLを調整\n      console.log('メモが作成されました:', response.data);\n      setSuccessMessage('メモの作成に成功しました！');\n\n      // フォーム内容をリセットしてcreate画面を再度表示する\n      setContent('');\n\n    } catch (error) {\n      console.error('メモ作成エラー:', error);\n      setErrorMessage('メモの作成に失敗しました。'); // エラーメッセージを設定\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {successMessage && <div style={{ color: 'green' }}>{successMessage}</div>} {/* 成功メッセージを表示 */}\n      {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>} {/* エラーメッセージを表示 */}\n      <label>\n        内容:\n        <input type=\"text\" name=\"content\" value={content} onChange={(e) => setContent(e.target.value)} />\n      </label>\n      <button type=\"submit\">メモを作成</button>\n    </form>\n  );\n};\n\nexport default MemoCreate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}