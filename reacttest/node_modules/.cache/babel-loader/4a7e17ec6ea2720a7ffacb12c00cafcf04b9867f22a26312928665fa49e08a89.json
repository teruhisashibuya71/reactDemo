{"ast":null,"code":"var _jsxFileName = \"/Users/ts/Desktop/reactDemo/reacttest/src/components/memo/MemoCreate.tsx\",\n  _s = $RefreshSig$();\n// 登録処理に必要なものは以下の2つ\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n// Memoモデルの定義を示す\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoCreate = () => {\n  _s();\n  const [content, setContent] = useState('');\n  const [createdAt, setCreatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [updatedAt, setUpdatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const newMemo = {\n        id: null,\n        // バックエンドで自動生成されることが多い\n        content: content,\n        createdAt: createdAt,\n        // バックエンドに合わせてフォーマットする必要がある\n        updatedAt: updatedAt // バックエンドに合わせてフォーマットする必要がある\n      };\n      const response = await axios.post('http://localhost:8080/api/memo/create', newMemo); // 必要に応じてURLを調整\n      console.log('メモが作成されました:', response.data);\n      // 必要に応じてフォームをリセットするか、別のページに移動する\n    } catch (error) {\n      console.error('メモ作成エラー:', error);\n      // エラーを適切に処理する（例：エラーメッセージを表示する）\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u5185\\u5BB9:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"content\",\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u30E1\\u30E2\\u3092\\u4F5C\\u6210\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoCreate, \"EXscow2Do9QzM7ZL9wHG/bVEzws=\");\n_c = MemoCreate;\nexport default MemoCreate;\nvar _c;\n$RefreshReg$(_c, \"MemoCreate\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","MemoCreate","_s","content","setContent","createdAt","setCreatedAt","updatedAt","setUpdatedAt","handleSubmit","e","preventDefault","newMemo","id","response","post","console","log","data","error","onSubmit","children","type","name","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ts/Desktop/reactDemo/reacttest/src/components/memo/MemoCreate.tsx"],"sourcesContent":["// 登録処理に必要なものは以下の2つ\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Memoモデルの定義を示す\ninterface Memo {\n  id: string | null;\n  content: string;\n  createdAt: string; // 必要に応じてDateオブジェクトに変更\n  updatedAt: string; // 必要に応じてDateオブジェクトに変更\n}\n\nconst MemoCreate: React.FC = () => {\n  const [content, setContent] = useState('');\n  const [createdAt, setCreatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n  const [updatedAt, setUpdatedAt] = useState(''); // デートピッカーコンポーネントの使用を検討\n\n  const handleSubmit = async (e: React.FormEvent) => {\n\n    e.preventDefault();\n    try {\n      const newMemo: Memo = {\n        id: null, // バックエンドで自動生成されることが多い\n        content: content,\n        createdAt: createdAt, // バックエンドに合わせてフォーマットする必要がある\n        updatedAt: updatedAt, // バックエンドに合わせてフォーマットする必要がある\n      };\n\n      const response = await axios.post('http://localhost:8080/api/memo/create', newMemo); // 必要に応じてURLを調整\n      console.log('メモが作成されました:', response.data);\n      // 必要に応じてフォームをリセットするか、別のページに移動する\n    } catch (error) {\n      console.error('メモ作成エラー:', error);\n      // エラーを適切に処理する（例：エラーメッセージを表示する）\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        内容:\n        <input type=\"text\" name=\"content\" value={content} onChange={(e) => setContent(e.target.value)} />\n      </label>\n      {/* createdAtとupdatedAtの入力欄を追加、日付ピッカーの使用を検討 */}\n      <button type=\"submit\">メモを作成</button>\n    </form>\n  );\n};\n\nexport default MemoCreate;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhD,MAAMY,YAAY,GAAG,MAAOC,CAAkB,IAAK;IAEjDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,OAAa,GAAG;QACpBC,EAAE,EAAE,IAAI;QAAE;QACVV,OAAO,EAAEA,OAAO;QAChBE,SAAS,EAAEA,SAAS;QAAE;QACtBE,SAAS,EAAEA,SAAS,CAAE;MACxB,CAAC;MAED,MAAMO,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,uCAAuC,EAAEH,OAAO,CAAC,CAAC,CAAC;MACrFI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,QAAQ,CAACI,IAAI,CAAC;MACzC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EAED,oBACEnB,OAAA;IAAMoB,QAAQ,EAAEX,YAAa;IAAAY,QAAA,gBAC3BrB,OAAA;MAAAqB,QAAA,GAAO,eAEL,eAAArB,OAAA;QAAOsB,IAAI,EAAC,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,KAAK,EAAErB,OAAQ;QAACsB,QAAQ,EAAGf,CAAC,IAAKN,UAAU,CAACM,CAAC,CAACgB,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5F,CAAC,eAER9B,OAAA;MAAQsB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX,CAAC;AAAC5B,EAAA,CAnCID,UAAoB;AAAA8B,EAAA,GAApB9B,UAAoB;AAqC1B,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}