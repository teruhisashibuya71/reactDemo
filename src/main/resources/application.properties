#spring.application.name=angularDemo

# h2 DB Setting
# http://localhost:8080/h2-console
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.ddl-auto=create-drop


#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.url=jdbc:h2:file:./target/db/testdb
#spring.datasource.username=sa
#spring.datasource.password=
#spring.datasource.initialization-mode=always
#spring.datasource.schema=classpath:schema.sql

#
#
## H2DB関連：再起動時にデータを消す方式

#
## H2DB関連：データを消さない方式(ファイル管理する形式)
## ログイン時のurl記述も以下の情報に切り替わるのでコピーすること
#spring.datasource.url=jdbc:h2:file:./testdb
#spring.jpa.hibernate.ddl-auto=update
#
#
##以下 aws用のパラメータ（Mysqlなので ポートは33０6の予定）
##spring.datasource.url=jdbc:mysql://<your_aurora_db_endpoint>:<port>/<your_database_name>?useSSL=false&serverTimezone=UTC
##spring.datasource.username=<your_db_username>
##spring.datasource.password=<your_db_password>
##spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
##spring.jpa.hibernate.ddl-auto=update # 開発中はupdate、本番環境ではvalidateかnoneに変更することを推奨
#
## 接続プールの設定
## アプリケーションが同時に保持できるデータベース接続の最大数を指定する。値を大きくすると、多くの同時リクエストを処理できる
##spring.datasource.hikari.maximumPoolSize=10
## 常にアイドル状態（使用されていない）で保持されるデータベース接続の数を指定。新しい接続を確立するオーバーヘッドを削減してレスポンスタイムを短縮可能
##spring.datasource.hikari.minimumIdle=2
#
#
#
#
